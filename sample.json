{
  "level": "L1_PROGRAM",
  "total_lines": 167,
  "includes": {
    "critical_includes": [],
    "system_includes": [
      "winsock2.h",
      "windows.h"
    ],
    "custom_includes": [
      "CUSTOM_INCLUDE_STD_TESTCASE_H"
    ]
  },
  "global_variables": [],
  "modules": [
    {
      "level": "L2_MODULE",
      "name": "GLOBAL_SCOPE",
      "type": "implicit_module",
      "start_line": 1,
      "end_line": 167,
      "functions": [
        {
          "level": "L3_FUNCTION",
          "name": "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad",
          "normalized_name": "VOID_FUNC",
          "return_type": "void",
          "parameters": [],
          "body_start": 30,
          "body_end": 112,
          "statement_blocks": [
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 46,
              "end_line": 49,
              "context": {
                "condition": "WSAStartup(MAKEWORD(2,2",
                "then_branch": [
                  "break;"
                ],
                "else_branch": null
              },
              "statements": [
                "if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)",
                "break;"
              ],
              "tokens": [
                "if",
                "(",
                "WSAStartup",
                "(",
                "MAKEWORD",
                "(",
                "2",
                ",",
                "2",
                ")",
                ",",
                "&",
                "wsaData",
                ")",
                "!",
                "=",
                "NO_ERROR",
                ")",
                "break",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 52,
              "end_line": 55,
              "context": {
                "condition": "listenSocket == INVALID_SOCKET",
                "then_branch": [
                  "break;"
                ],
                "else_branch": null
              },
              "statements": [
                "if (listenSocket == INVALID_SOCKET)",
                "break;"
              ],
              "tokens": [
                "if",
                "(",
                "listenSocket",
                "=",
                "=",
                "INVALID_SOCKET",
                ")",
                "break",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 60,
              "end_line": 63,
              "context": {
                "condition": "SOCKET_ERROR == bind(listenSocket, (struct sockaddr*",
                "then_branch": [
                  "break;"
                ],
                "else_branch": null
              },
              "statements": [
                "if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))",
                "break;"
              ],
              "tokens": [
                "if",
                "(",
                "SOCKET_ERROR",
                "=",
                "=",
                "bind",
                "(",
                "listenSocket",
                ",",
                "(",
                "struct",
                "sockaddr",
                "*",
                ")",
                "&",
                "service",
                ",",
                "sizeof",
                "(",
                "service",
                ")",
                ")",
                ")",
                "break",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 64,
              "end_line": 67,
              "context": {
                "condition": "SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG",
                "then_branch": [
                  "break;"
                ],
                "else_branch": null
              },
              "statements": [
                "if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))",
                "break;"
              ],
              "tokens": [
                "if",
                "(",
                "SOCKET_ERROR",
                "=",
                "=",
                "listen",
                "(",
                "listenSocket",
                ",",
                "LISTEN_BACKLOG",
                ")",
                ")",
                "break",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 69,
              "end_line": 72,
              "context": {
                "condition": "acceptSocket == INVALID_SOCKET",
                "then_branch": [
                  "break;"
                ],
                "else_branch": null
              },
              "statements": [
                "if (acceptSocket == INVALID_SOCKET)",
                "break;"
              ],
              "tokens": [
                "if",
                "(",
                "acceptSocket",
                "=",
                "=",
                "INVALID_SOCKET",
                ")",
                "break",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 86,
              "end_line": 89,
              "context": {
                "condition": "recvResult == SOCKET_ERROR || recvResult == 0",
                "then_branch": [
                  "break;"
                ],
                "else_branch": null
              },
              "statements": [
                "if (recvResult == SOCKET_ERROR || recvResult == 0)",
                "break;"
              ],
              "tokens": [
                "if",
                "(",
                "recvResult",
                "=",
                "=",
                "SOCKET_ERROR",
                "|",
                "|",
                "recvResult",
                "=",
                "=",
                "0",
                ")",
                "break",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "loop_block",
              "start_line": 92,
              "end_line": 93,
              "context": {
                "loop_type": "while",
                "condition": "0"
              },
              "statements": [
                "while (0);",
                "if (acceptSocket != INVALID_SOCKET)"
              ],
              "tokens": [
                "while",
                "(",
                "0",
                ")",
                ";",
                "if",
                "(",
                "acceptSocket",
                "!",
                "=",
                "INVALID_SOCKET",
                ")"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 93,
              "end_line": 96,
              "context": {
                "condition": "acceptSocket != INVALID_SOCKET",
                "then_branch": [
                  "closesocket(acceptSocket);"
                ],
                "else_branch": null
              },
              "statements": [
                "if (acceptSocket != INVALID_SOCKET)",
                "closesocket(acceptSocket);"
              ],
              "tokens": [
                "if",
                "(",
                "acceptSocket",
                "!",
                "=",
                "INVALID_SOCKET",
                ")",
                "closesocket",
                "(",
                "acceptSocket",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 97,
              "end_line": 100,
              "context": {
                "condition": "listenSocket != INVALID_SOCKET",
                "then_branch": [
                  "closesocket(listenSocket);"
                ],
                "else_branch": null
              },
              "statements": [
                "if (listenSocket != INVALID_SOCKET)",
                "closesocket(listenSocket);"
              ],
              "tokens": [
                "if",
                "(",
                "listenSocket",
                "!",
                "=",
                "INVALID_SOCKET",
                ")",
                "closesocket",
                "(",
                "listenSocket",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 101,
              "end_line": 104,
              "context": {
                "condition": "wsaDataInit",
                "then_branch": [
                  "WSACleanup();"
                ],
                "else_branch": null
              },
              "statements": [
                "if (wsaDataInit)",
                "WSACleanup();"
              ],
              "tokens": [
                "if",
                "(",
                "wsaDataInit",
                ")",
                "WSACleanup",
                "(",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 107,
              "end_line": 111,
              "context": {
                "condition": "!SetComputerNameA(data",
                "then_branch": [
                  "printLine(\"Failure setting computer name\");",
                  "exit(1);"
                ],
                "else_branch": null
              },
              "statements": [
                "if (!SetComputerNameA(data))",
                "printLine(\"Failure setting computer name\");",
                "exit(1);"
              ],
              "tokens": [
                "if",
                "(",
                "!",
                "SetComputerNameA",
                "(",
                "data",
                ")",
                ")",
                "printLine",
                "(",
                "\"Failure setting computer name\"",
                ")",
                ";",
                "exit",
                "(",
                "1",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "l0 la may cai ifndef, include..",
              "tokens": [
                "l0",
                "la",
                "may",
                "cai",
                "ifndef",
                ",",
                "include",
                ".",
                "."
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "l1 laf cai hafm",
              "tokens": [
                "l1",
                "laf",
                "cai",
                "hafm"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "l2",
              "tokens": [
                "l2"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "l3 la logivc, nhu do while, loop",
              "tokens": [
                "l3",
                "la",
                "logivc",
                ",",
                "nhu",
                "do",
                "while",
                ",",
                "loop"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "char * data;",
              "tokens": [
                "char",
                "*",
                "data",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "char dataBuffer[100] = \"\";",
              "tokens": [
                "char",
                "dataBuffer",
                "[",
                "100",
                "]",
                "=",
                "\"\"",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "data = dataBuffer;",
              "tokens": [
                "data",
                "=",
                "dataBuffer",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "WSADATA wsaData;",
              "tokens": [
                "WSADATA",
                "wsaData",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "BOOL wsaDataInit = FALSE;",
              "tokens": [
                "BOOL",
                "wsaDataInit",
                "=",
                "FALSE",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "SOCKET listenSocket = INVALID_SOCKET;",
              "tokens": [
                "SOCKET",
                "listenSocket",
                "=",
                "INVALID_SOCKET",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "SOCKET acceptSocket = INVALID_SOCKET;",
              "tokens": [
                "SOCKET",
                "acceptSocket",
                "=",
                "INVALID_SOCKET",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "struct sockaddr_in service;",
              "tokens": [
                "struct",
                "sockaddr_in",
                "service",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "int recvResult;",
              "tokens": [
                "int",
                "recvResult",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "do",
              "tokens": [
                "do"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "wsaDataInit = 1;",
              "tokens": [
                "wsaDataInit",
                "=",
                "1",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "listenSocket = socket(PF_INET, SOCK_STREAM, 0);",
              "tokens": [
                "listenSocket",
                "=",
                "socket",
                "(",
                "PF_INET",
                ",",
                "SOCK_STREAM",
                ",",
                "0",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "memset(&service, 0, sizeof(service));",
              "tokens": [
                "memset",
                "(",
                "&",
                "service",
                ",",
                "0",
                ",",
                "sizeof",
                "(",
                "service",
                ")",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "service.sin_family = AF_INET;",
              "tokens": [
                "service",
                ".",
                "sin_family",
                "=",
                "AF_INET",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "service.sin_addr.s_addr = INADDR_ANY;",
              "tokens": [
                "service",
                ".",
                "sin_addr",
                ".",
                "s_addr",
                "=",
                "INADDR_ANY",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "service.sin_port = htons(LISTEN_PORT);",
              "tokens": [
                "service",
                ".",
                "sin_port",
                "=",
                "htons",
                "(",
                "LISTEN_PORT",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "acceptSocket = accept(listenSocket, NULL, NULL);",
              "tokens": [
                "acceptSocket",
                "=",
                "accept",
                "(",
                "listenSocket",
                ",",
                "NULL",
                ",",
                "NULL",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "/* INCIDENTAL CWE 188 - reliance on data memory layout",
              "tokens": [
                "/",
                "*",
                "INCIDENTAL",
                "CWE",
                "188",
                "-",
                "reliance",
                "on",
                "data",
                "memory",
                "layout"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* recv and friends return \"number of bytes\" received",
              "tokens": [
                "*",
                "recv",
                "and",
                "friends",
                "return",
                "\"",
                "number",
                "of",
                "bytes",
                "\"",
                "received"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* char's on our system, however, may not be \"octets\" (8-bit",
              "tokens": [
                "*",
                "char",
                "'",
                "s",
                "on",
                "our",
                "system",
                ",",
                "however",
                ",",
                "may",
                "not",
                "be",
                "\"",
                "octets",
                "\"",
                "(",
                "8",
                "-",
                "bit"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* bytes) but could be just about anything.  Also,",
              "tokens": [
                "*",
                "bytes",
                ")",
                "but",
                "could",
                "be",
                "just",
                "about",
                "anything",
                ".",
                "Also",
                ","
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* even if the external environment is ASCII or UTF8,",
              "tokens": [
                "*",
                "even",
                "if",
                "the",
                "external",
                "environment",
                "is",
                "ASCII",
                "or",
                "UTF8",
                ","
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* the ANSI/ISO C standard does not dictate that the",
              "tokens": [
                "*",
                "the",
                "ANSI",
                "/",
                "ISO",
                "C",
                "standard",
                "does",
                "not",
                "dictate",
                "that",
                "the"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* character set used by the actual language or character",
              "tokens": [
                "*",
                "character",
                "set",
                "used",
                "by",
                "the",
                "actual",
                "language",
                "or",
                "character"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* constants matches.",
              "tokens": [
                "*",
                "constants",
                "matches",
                "."
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "*",
              "tokens": [
                "*"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "* In practice none of these are usually issues...",
              "tokens": [
                "*",
                "In",
                "practice",
                "none",
                "of",
                "these",
                "are",
                "usually",
                "issues",
                ".",
                ".",
                "."
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "*/",
              "tokens": [
                "*",
                "/"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "/* FLAW: read the new hostname from a network socket */",
              "tokens": [
                "/",
                "*",
                "FLAW",
                ":",
                "read",
                "the",
                "new",
                "hostname",
                "from",
                "a",
                "network",
                "socket",
                "*",
                "/"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "recvResult = recv(acceptSocket, data, 100 - 1, 0);",
              "tokens": [
                "recvResult",
                "=",
                "recv",
                "(",
                "acceptSocket",
                ",",
                "data",
                ",",
                "100",
                "-",
                "1",
                ",",
                "0",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "data[recvResult] = '\\0';",
              "tokens": [
                "data",
                "[",
                "recvResult",
                "]",
                "=",
                "'",
                "\\",
                "0",
                "'",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "/* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */",
              "tokens": [
                "/",
                "*",
                "POTENTIAL",
                "FLAW",
                ":",
                "set",
                "the",
                "hostname",
                "to",
                "data",
                "obtained",
                "from",
                "a",
                "potentially",
                "external",
                "source",
                "*",
                "/"
              ]
            }
          ],
          "pattern": [
            {
              "pattern": "cwe15",
              "value": "recvResult = recv(acceptSocket, data, 100 - 1, 0);"
            },
            {
              "pattern": "cwe15",
              "value": "if (!SetComputerNameA(data))"
            }
          ]
        },
        {
          "level": "L3_FUNCTION",
          "name": "goodG2B",
          "normalized_name": "VOID_FUNC",
          "return_type": "static void",
          "parameters": [],
          "body_start": 121,
          "body_end": 132,
          "statement_blocks": [
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "vulnerable_operation",
              "start_line": 122,
              "end_line": 127,
              "context": {
                "focus_line": "strcpy(data, \"hostname\");",
                "preceding_context": [
                  "char dataBuffer[100] = \"\";",
                  "data = dataBuffer;",
                  "/* FIX: get the hostname from a string literal */"
                ],
                "following_context": [
                  "/* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */",
                  "if (!SetComputerNameA(data))"
                ]
              },
              "statements": [
                "char dataBuffer[100] = \"\";",
                "data = dataBuffer;",
                "/* FIX: get the hostname from a string literal */",
                "strcpy(data, \"hostname\");",
                "/* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */",
                "if (!SetComputerNameA(data))"
              ],
              "tokens": [
                "char",
                "dataBuffer",
                "[",
                "100",
                "]",
                "=",
                "\"\"",
                ";",
                "data",
                "=",
                "dataBuffer",
                ";",
                "/",
                "*",
                "FIX",
                ":",
                "get",
                "the",
                "hostname",
                "from",
                "a",
                "string",
                "literal",
                "*",
                "/",
                "strcpy",
                "(",
                "data",
                ",",
                "\"hostname\"",
                ")",
                ";",
                "/",
                "*",
                "POTENTIAL",
                "FLAW",
                ":",
                "set",
                "the",
                "hostname",
                "to",
                "data",
                "obtained",
                "from",
                "a",
                "potentially",
                "external",
                "source",
                "*",
                "/",
                "if",
                "(",
                "!",
                "SetComputerNameA",
                "(",
                "data",
                ")",
                ")"
              ]
            },
            {
              "level": "L4_COMPLEX_SENTENCE",
              "type": "conditional_block",
              "start_line": 127,
              "end_line": 131,
              "context": {
                "condition": "!SetComputerNameA(data",
                "then_branch": [
                  "printLine(\"Failure setting computer name\");",
                  "exit(1);"
                ],
                "else_branch": null
              },
              "statements": [
                "if (!SetComputerNameA(data))",
                "printLine(\"Failure setting computer name\");",
                "exit(1);"
              ],
              "tokens": [
                "if",
                "(",
                "!",
                "SetComputerNameA",
                "(",
                "data",
                ")",
                ")",
                "printLine",
                "(",
                "\"Failure setting computer name\"",
                ")",
                ";",
                "exit",
                "(",
                "1",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "char * data;",
              "tokens": [
                "char",
                "*",
                "data",
                ";"
              ]
            }
          ]
        },
        {
          "level": "L3_FUNCTION",
          "name": "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good",
          "normalized_name": "VOID_FUNC",
          "return_type": "void",
          "parameters": [],
          "body_start": 136,
          "body_end": 137,
          "statement_blocks": [
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "goodG2B();",
              "tokens": [
                "goodG2B",
                "(",
                ")",
                ";"
              ]
            }
          ]
        },
        {
          "level": "L3_FUNCTION",
          "name": "main",
          "normalized_name": "INT_FUNC",
          "return_type": "int",
          "parameters": [
            {
              "original_name": "argc",
              "normalized_name": "PARAM_VAR_INT",
              "type": "int",
              "scope": "parameter"
            },
            {
              "original_name": "argv",
              "normalized_name": "PARAM_VAR_STR_PTR",
              "type": "char *",
              "scope": "parameter"
            }
          ],
          "body_start": 151,
          "body_end": 164,
          "statement_blocks": [
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "/* seed randomness */",
              "tokens": [
                "/",
                "*",
                "seed",
                "randomness",
                "*",
                "/"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "srand( (unsigned)time(NULL) );",
              "tokens": [
                "srand",
                "(",
                "(",
                "unsigned",
                ")",
                "time",
                "(",
                "NULL",
                ")",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "printLine(\"Calling good()...\");",
              "tokens": [
                "printLine",
                "(",
                "\"",
                "Calling",
                "good",
                "(",
                ")",
                ".",
                ".",
                ".",
                "\"",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good();",
              "tokens": [
                "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good",
                "(",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "printLine(\"Finished good()\");",
              "tokens": [
                "printLine",
                "(",
                "\"",
                "Finished",
                "good",
                "(",
                ")",
                "\"",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "printLine(\"Calling bad()...\");",
              "tokens": [
                "printLine",
                "(",
                "\"",
                "Calling",
                "bad",
                "(",
                ")",
                ".",
                ".",
                ".",
                "\"",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad();",
              "tokens": [
                "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad",
                "(",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "printLine(\"Finished bad()\");",
              "tokens": [
                "printLine",
                "(",
                "\"",
                "Finished",
                "bad",
                "(",
                ")",
                "\"",
                ")",
                ";"
              ]
            },
            {
              "level": "L4_SIMPLE_SENTENCE",
              "type": "simple_statement",
              "statement": "return 0;",
              "tokens": [
                "return",
                "0",
                ";"
              ]
            }
          ]
        }
      ]
    }
  ]
}