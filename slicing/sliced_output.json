{
  "level": "L0",
  "type": "PROGRAM",
  "name": "sample.c",
  "full_code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE15_External_Control_of_System_or_Configuration_Setting__w32_01.c\nLabel Definition File: CWE15_External_Control_of_System_or_Configuration_Setting__w32.label.xml\nTemplate File: sources-sink-01.tmpl.c\n*/\n/*\n * @description\n * CWE: 15 External Control of System or Configuration Setting\n * BadSource:  Get the hostname from a network socket\n * GoodSource: Get the hostname from a string literal\n * Sink:\n *    BadSink : Set the hostname\n * Flow Variant: 01 Baseline\n *\n * */\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n#ifndef OMITBAD\n\nvoid CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        WSADATA wsaData;\n        BOOL wsaDataInit = FALSE;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        struct sockaddr_in service;\n        int recvResult;\n        do\n        {\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n            listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(LISTEN_PORT);\n            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n            {\n                break;\n            }\n            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            /* INCIDENTAL CWE 188 - reliance on data memory layout\n             * recv and friends return \"number of bytes\" received\n             * char's on our system, however, may not be \"octets\" (8-bit\n             * bytes) but could be just about anything.  Also,\n             * even if the external environment is ASCII or UTF8,\n             * the ANSI/ISO C standard does not dictate that the\n             * character set used by the actual language or character\n             * constants matches.\n             *\n             * In practice none of these are usually issues...\n             */\n            /* FLAW: read the new hostname from a network socket */\n            recvResult = recv(acceptSocket, data, 100 - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            data[recvResult] = '\\0';\n        }\n        while (0);\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            closesocket(acceptSocket);\n        }\n        if (listenSocket != INVALID_SOCKET)\n        {\n            closesocket(listenSocket);\n        }\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n    }\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n#endif /* OMITBAD */\n\n#ifndef OMITGOOD\n\n/* goodG2B uses the GoodSource with the BadSink */\nstatic void goodG2B()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    /* FIX: get the hostname from a string literal */\n    strcpy(data, \"hostname\");\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good()\n{\n    goodG2B();\n}\n\n#endif /* OMITGOOD */\n\n/* Below is the main(). It is only used when building this testcase on\n * its own for testing or for building a binary to use in testing binary\n * analysis tools. It is not used when compiling all the testcases as one\n * application, which is how source code analysis tools are tested.\n */\n\n#ifdef INCLUDEMAIN\n\nint main(int argc, char * argv[])\n{\n    /* seed randomness */\n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good();\n    printLine(\"Finished good()\");\n#endif /* OMITGOOD */\n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad();\n    printLine(\"Finished bad()\");\n#endif /* OMITBAD */\n    return 0;\n}\n\n#endif\n",
  "start_line": 1,
  "end_line": 163,
  "line_count": 163,
  "metadata": {
    "source_path": "sample.c",
    "includes": [
      "#include \"std_testcase.h\"",
      "#include <winsock2.h>",
      "#include <windows.h>"
    ],
    "global_variables": [],
    "total_lines": 163
  },
  "modules": [
    {
      "level": "L1",
      "type": "MODULE",
      "name": "sockaddr_in",
      "full_code": "        struct sockaddr_in service;\n        int recvResult;\n        do\n        {\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n            listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(LISTEN_PORT);\n            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n            {\n                break;\n            }\n            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            /* INCIDENTAL CWE 188 - reliance on data memory layout\n             * recv and friends return \"number of bytes\" received\n             * char's on our system, however, may not be \"octets\" (8-bit\n             * bytes) but could be just about anything.  Also,\n             * even if the external environment is ASCII or UTF8,\n             * the ANSI/ISO C standard does not dictate that the\n             * character set used by the actual language or character\n             * constants matches.\n             *\n             * In practice none of these are usually issues...\n             */\n            /* FLAW: read the new hostname from a network socket */\n            recvResult = recv(acceptSocket, data, 100 - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            data[recvResult] = '\\0';\n        }",
      "start_line": 39,
      "end_line": 88,
      "line_count": 50,
      "metadata": {
        "type": "struct_module"
      }
    },
    {
      "level": "L1",
      "type": "MODULE",
      "name": "GLOBAL_SCOPE",
      "full_code": "/* TEMPLATE GENERATED TESTCASE FILE\nFilename: CWE15_External_Control_of_System_or_Configuration_Setting__w32_01.c\nLabel Definition File: CWE15_External_Control_of_System_or_Configuration_Setting__w32.label.xml\nTemplate File: sources-sink-01.tmpl.c\n*/\n/*\n * @description\n * CWE: 15 External Control of System or Configuration Setting\n * BadSource:  Get the hostname from a network socket\n * GoodSource: Get the hostname from a string literal\n * Sink:\n *    BadSink : Set the hostname\n * Flow Variant: 01 Baseline\n *\n * */\n\n#include \"std_testcase.h\"\n\n#include <winsock2.h>\n#pragma comment(lib, \"ws2_32\")\n\n#define LISTEN_PORT 999\n#define LISTEN_BACKLOG 5\n\n#include <windows.h>\n\n#ifndef OMITBAD\n\nvoid CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        WSADATA wsaData;\n        BOOL wsaDataInit = FALSE;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        struct sockaddr_in service;\n        int recvResult;\n        do\n        {\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n            listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(LISTEN_PORT);\n            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n            {\n                break;\n            }\n            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            /* INCIDENTAL CWE 188 - reliance on data memory layout\n             * recv and friends return \"number of bytes\" received\n             * char's on our system, however, may not be \"octets\" (8-bit\n             * bytes) but could be just about anything.  Also,\n             * even if the external environment is ASCII or UTF8,\n             * the ANSI/ISO C standard does not dictate that the\n             * character set used by the actual language or character\n             * constants matches.\n             *\n             * In practice none of these are usually issues...\n             */\n            /* FLAW: read the new hostname from a network socket */\n            recvResult = recv(acceptSocket, data, 100 - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            data[recvResult] = '\\0';\n        }\n        while (0);\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            closesocket(acceptSocket);\n        }\n        if (listenSocket != INVALID_SOCKET)\n        {\n            closesocket(listenSocket);\n        }\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n    }\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\n#endif /* OMITBAD */\n\n#ifndef OMITGOOD\n\n/* goodG2B uses the GoodSource with the BadSink */\nstatic void goodG2B()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    /* FIX: get the hostname from a string literal */\n    strcpy(data, \"hostname\");\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}\n\nvoid CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good()\n{\n    goodG2B();\n}\n\n#endif /* OMITGOOD */\n\n/* Below is the main(). It is only used when building this testcase on\n * its own for testing or for building a binary to use in testing binary\n * analysis tools. It is not used when compiling all the testcases as one\n * application, which is how source code analysis tools are tested.\n */\n\n#ifdef INCLUDEMAIN\n\nint main(int argc, char * argv[])\n{\n    /* seed randomness */\n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good();\n    printLine(\"Finished good()\");\n#endif /* OMITGOOD */\n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad();\n    printLine(\"Finished bad()\");\n#endif /* OMITBAD */\n    return 0;\n}\n\n#endif",
      "start_line": 1,
      "end_line": 163,
      "line_count": 163,
      "metadata": {
        "type": "global_functions"
      },
      "functions": [
        {
          "level": "L2",
          "type": "FUNCTION",
          "name": "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad",
          "full_code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    {\n        WSADATA wsaData;\n        BOOL wsaDataInit = FALSE;\n        SOCKET listenSocket = INVALID_SOCKET;\n        SOCKET acceptSocket = INVALID_SOCKET;\n        struct sockaddr_in service;\n        int recvResult;\n        do\n        {\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n            listenSocket = socket(PF_INET, SOCK_STREAM, 0);\n            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = INADDR_ANY;\n            service.sin_port = htons(LISTEN_PORT);\n            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n            {\n                break;\n            }\n            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n            {\n                break;\n            }\n            acceptSocket = accept(listenSocket, NULL, NULL);\n            if (acceptSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            /* INCIDENTAL CWE 188 - reliance on data memory layout\n             * recv and friends return \"number of bytes\" received\n             * char's on our system, however, may not be \"octets\" (8-bit\n             * bytes) but could be just about anything.  Also,\n             * even if the external environment is ASCII or UTF8,\n             * the ANSI/ISO C standard does not dictate that the\n             * character set used by the actual language or character\n             * constants matches.\n             *\n             * In practice none of these are usually issues...\n             */\n            /* FLAW: read the new hostname from a network socket */\n            recvResult = recv(acceptSocket, data, 100 - 1, 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            data[recvResult] = '\\0';\n        }\n        while (0);\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            closesocket(acceptSocket);\n        }\n        if (listenSocket != INVALID_SOCKET)\n        {\n            closesocket(listenSocket);\n        }\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n    }\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
          "start_line": 29,
          "end_line": 109,
          "line_count": 81,
          "metadata": {
            "return_type": "void",
            "parameters": [],
            "signature": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad()",
            "is_library": false
          },
          "blocks": [
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    char * data;",
              "start_line": 31,
              "end_line": 31,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "char",
                  "*",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    char dataBuffer[100] = \"\";",
              "start_line": 32,
              "end_line": 32,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "char",
                  "VAR",
                  "[",
                  "NUM_LITERAL",
                  "]",
                  "=",
                  "\"STRING_LITERAL\"",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    data = dataBuffer;",
              "start_line": 33,
              "end_line": 33,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "=",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        WSADATA wsaData;",
              "start_line": 35,
              "end_line": 35,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "TYPE_VAR",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        BOOL wsaDataInit = FALSE;",
              "start_line": 36,
              "end_line": 36,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "TYPE_VAR",
                  "VAR",
                  "=",
                  "TYPE_VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        SOCKET listenSocket = INVALID_SOCKET;",
              "start_line": 37,
              "end_line": 37,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "TYPE_VAR",
                  "VAR",
                  "=",
                  "MACRO_VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        SOCKET acceptSocket = INVALID_SOCKET;",
              "start_line": 38,
              "end_line": 38,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "TYPE_VAR",
                  "VAR",
                  "=",
                  "MACRO_VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        struct sockaddr_in service;",
              "start_line": 39,
              "end_line": 39,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "struct",
                  "VAR",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        int recvResult;",
              "start_line": 40,
              "end_line": 40,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "int",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        do",
              "start_line": 41,
              "end_line": 41,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "do"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }",
              "start_line": 43,
              "end_line": 46,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "WSAStartup(MAKEWORD(2,2",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "                break;",
                  "start_line": 45,
                  "end_line": 45,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "break",
                    "tokens": [
                      "break",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            wsaDataInit = 1;",
              "start_line": 47,
              "end_line": 47,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "=",
                  "1",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            listenSocket = socket(PF_INET, SOCK_STREAM, 0);",
              "start_line": 48,
              "end_line": 48,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "=",
                  "VAR",
                  "(",
                  "MACRO_VAR",
                  ",",
                  "MACRO_VAR",
                  ",",
                  "0",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "            if (listenSocket == INVALID_SOCKET)\n            {\n                break;\n            }",
              "start_line": 49,
              "end_line": 52,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "listenSocket == INVALID_SOCKET",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "                break;",
                  "start_line": 51,
                  "end_line": 51,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "break",
                    "tokens": [
                      "break",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            memset(&service, 0, sizeof(service));",
              "start_line": 53,
              "end_line": 53,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "memset",
                  "(",
                  "&",
                  "VAR",
                  ",",
                  "0",
                  ",",
                  "VAR",
                  "(",
                  "VAR",
                  ")",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            service.sin_family = AF_INET;",
              "start_line": 54,
              "end_line": 54,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  ".",
                  "VAR",
                  "=",
                  "MACRO_VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            service.sin_addr.s_addr = INADDR_ANY;",
              "start_line": 55,
              "end_line": 55,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  ".",
                  "VAR",
                  ".",
                  "VAR",
                  "=",
                  "MACRO_VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            service.sin_port = htons(LISTEN_PORT);",
              "start_line": 56,
              "end_line": 56,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  ".",
                  "VAR",
                  "=",
                  "VAR",
                  "(",
                  "MACRO_VAR",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "            if (SOCKET_ERROR == bind(listenSocket, (struct sockaddr*)&service, sizeof(service)))\n            {\n                break;\n            }",
              "start_line": 57,
              "end_line": 60,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "SOCKET_ERROR == bind(listenSocket, (struct sockaddr*",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "                break;",
                  "start_line": 59,
                  "end_line": 59,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "break",
                    "tokens": [
                      "break",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "            if (SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG))\n            {\n                break;\n            }",
              "start_line": 61,
              "end_line": 64,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "SOCKET_ERROR == listen(listenSocket, LISTEN_BACKLOG",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "                break;",
                  "start_line": 63,
                  "end_line": 63,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "break",
                    "tokens": [
                      "break",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            acceptSocket = accept(listenSocket, NULL, NULL);",
              "start_line": 65,
              "end_line": 65,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "=",
                  "VAR",
                  "(",
                  "VAR",
                  ",",
                  "NULL",
                  ",",
                  "NULL",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "            if (acceptSocket == INVALID_SOCKET)\n            {\n                break;\n            }",
              "start_line": 66,
              "end_line": 69,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "acceptSocket == INVALID_SOCKET",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "                break;",
                  "start_line": 68,
                  "end_line": 68,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "break",
                    "tokens": [
                      "break",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * recv and friends return \"number of bytes\" received",
              "start_line": 71,
              "end_line": 71,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "VAR",
                  "VAR",
                  "VAR",
                  "return",
                  "\"STRING_LITERAL\"",
                  "VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * char's on our system, however, may not be \"octets\" (8-bit",
              "start_line": 72,
              "end_line": 72,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "char",
                  "'",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  ",",
                  "VAR",
                  ",",
                  "VAR",
                  "VAR",
                  "VAR",
                  "\"STRING_LITERAL\"",
                  "(",
                  "NUM_LITERAL",
                  "-",
                  "VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * bytes) but could be just about anything.  Also,",
              "start_line": 73,
              "end_line": 73,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "VAR",
                  ")",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  ".",
                  "TYPE_VAR",
                  ","
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * even if the external environment is ASCII or UTF8,",
              "start_line": 74,
              "end_line": 74,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "VAR",
                  "if",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "TYPE_VAR",
                  "VAR",
                  "TYPE_VAR",
                  ","
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * the ANSI/ISO C standard does not dictate that the",
              "start_line": 75,
              "end_line": 75,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "VAR",
                  "TYPE_VAR",
                  "/",
                  "TYPE_VAR",
                  "TYPE_VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * character set used by the actual language or character",
              "start_line": 76,
              "end_line": 76,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * constants matches.",
              "start_line": 77,
              "end_line": 77,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "VAR",
                  "VAR",
                  "."
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             *",
              "start_line": 78,
              "end_line": 78,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             * In practice none of these are usually issues...",
              "start_line": 79,
              "end_line": 79,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "TYPE_VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  "VAR",
                  ".",
                  ".",
                  "."
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "             */",
              "start_line": 80,
              "end_line": 80,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "*",
                  "/"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            recvResult = recv(acceptSocket, data, 100 - 1, 0);",
              "start_line": 82,
              "end_line": 82,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "=",
                  "VAR",
                  "(",
                  "VAR",
                  ",",
                  "VAR",
                  ",",
                  "NUM_LITERAL",
                  "-",
                  "1",
                  ",",
                  "0",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }",
              "start_line": 83,
              "end_line": 86,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "recvResult == SOCKET_ERROR || recvResult == 0",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "                break;",
                  "start_line": 85,
                  "end_line": 85,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "break",
                    "tokens": [
                      "break",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "            data[recvResult] = '\\0';",
              "start_line": 87,
              "end_line": 87,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "[",
                  "VAR",
                  "]",
                  "=",
                  "'",
                  "\\",
                  "0",
                  "'",
                  ";"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "while_block",
              "full_code": "        while (0);\n        if (acceptSocket != INVALID_SOCKET)\n        {\n            closesocket(acceptSocket);\n        }",
              "start_line": 89,
              "end_line": 93,
              "line_count": 5,
              "metadata": {
                "block_type": "loop",
                "loop_type": "while",
                "condition": "0"
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "        if (acceptSocket != INVALID_SOCKET)",
                  "start_line": 90,
                  "end_line": 90,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "assignment",
                    "tokens": [
                      "if",
                      "(",
                      "VAR",
                      "!=",
                      "MACRO_VAR",
                      ")"
                    ]
                  }
                },
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "            closesocket(acceptSocket);",
                  "start_line": 92,
                  "end_line": 92,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "VAR",
                      "(",
                      "VAR",
                      ")",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "        if (listenSocket != INVALID_SOCKET)\n        {\n            closesocket(listenSocket);\n        }",
              "start_line": 94,
              "end_line": 97,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "listenSocket != INVALID_SOCKET",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "            closesocket(listenSocket);",
                  "start_line": 96,
                  "end_line": 96,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "VAR",
                      "(",
                      "VAR",
                      ")",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "        if (wsaDataInit)\n        {\n            WSACleanup();\n        }",
              "start_line": 98,
              "end_line": 101,
              "line_count": 4,
              "metadata": {
                "block_type": "conditional",
                "condition": "wsaDataInit",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "            WSACleanup();",
                  "start_line": 100,
                  "end_line": 100,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "TYPE_VAR",
                      "(",
                      ")",
                      ";"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "if_block",
              "full_code": "    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }",
              "start_line": 104,
              "end_line": 108,
              "line_count": 5,
              "metadata": {
                "block_type": "conditional",
                "condition": "!SetComputerNameA(data",
                "has_else": false
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "        printLine(\"Failure setting computer name\");",
                  "start_line": 106,
                  "end_line": 106,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "VAR",
                      "(",
                      "\"STRING_LITERAL\"",
                      ")",
                      ";"
                    ]
                  }
                },
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "        exit(1);",
                  "start_line": 107,
                  "end_line": 107,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "VAR",
                      "(",
                      "1",
                      ")",
                      ";"
                    ]
                  }
                }
              ]
            }
          ]
        },
        {
          "level": "L2",
          "type": "FUNCTION",
          "name": "goodG2B",
          "full_code": "static void goodG2B()\n{\n    char * data;\n    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    /* FIX: get the hostname from a string literal */\n    strcpy(data, \"hostname\");\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {\n        printLine(\"Failure setting computer name\");\n        exit(1);\n    }\n}",
          "start_line": 116,
          "end_line": 129,
          "line_count": 14,
          "metadata": {
            "return_type": "static void",
            "parameters": [],
            "signature": "static void goodG2B()",
            "is_library": false
          },
          "blocks": [
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    char * data;",
              "start_line": 118,
              "end_line": 118,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "char",
                  "*",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    char dataBuffer[100] = \"\";",
              "start_line": 119,
              "end_line": 119,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "char",
                  "VAR",
                  "[",
                  "NUM_LITERAL",
                  "]",
                  "=",
                  "\"STRING_LITERAL\"",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    data = dataBuffer;",
              "start_line": 120,
              "end_line": 120,
              "line_count": 1,
              "metadata": {
                "statement_type": "assignment",
                "tokens": [
                  "VAR",
                  "=",
                  "VAR",
                  ";"
                ]
              }
            },
            {
              "level": "L3",
              "type": "STATEMENT_BLOCK",
              "name": "vulnerable_context",
              "full_code": "    char dataBuffer[100] = \"\";\n    data = dataBuffer;\n    /* FIX: get the hostname from a string literal */\n    strcpy(data, \"hostname\");\n    /* POTENTIAL FLAW: set the hostname to data obtained from a potentially external source */\n    if (!SetComputerNameA(data))\n    {",
              "start_line": 119,
              "end_line": 125,
              "line_count": 7,
              "metadata": {
                "block_type": "function_call_context",
                "vulnerable_line": "strcpy(data, \"hostname\");",
                "focus_line_number": 122
              },
              "statements": [
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "    char dataBuffer[100] = \"\";",
                  "start_line": 119,
                  "end_line": 119,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "assignment",
                    "tokens": [
                      "char",
                      "VAR",
                      "[",
                      "NUM_LITERAL",
                      "]",
                      "=",
                      "\"STRING_LITERAL\"",
                      ";"
                    ]
                  }
                },
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "    data = dataBuffer;",
                  "start_line": 120,
                  "end_line": 120,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "assignment",
                    "tokens": [
                      "VAR",
                      "=",
                      "VAR",
                      ";"
                    ]
                  }
                },
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "    strcpy(data, \"hostname\");",
                  "start_line": 122,
                  "end_line": 122,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "strcpy",
                      "(",
                      "VAR",
                      ",",
                      "\"STRING_LITERAL\"",
                      ")",
                      ";"
                    ]
                  }
                },
                {
                  "level": "L4",
                  "type": "STATEMENT",
                  "name": "statement",
                  "full_code": "    if (!SetComputerNameA(data))",
                  "start_line": 124,
                  "end_line": 124,
                  "line_count": 1,
                  "metadata": {
                    "statement_type": "function_call",
                    "tokens": [
                      "if",
                      "(",
                      "!",
                      "TYPE_VAR",
                      "(",
                      "VAR",
                      ")",
                      ")"
                    ]
                  }
                }
              ]
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        printLine(\"Failure setting computer name\");",
              "start_line": 126,
              "end_line": 126,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "\"STRING_LITERAL\"",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "        exit(1);",
              "start_line": 127,
              "end_line": 127,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "1",
                  ")",
                  ";"
                ]
              }
            }
          ]
        },
        {
          "level": "L2",
          "type": "FUNCTION",
          "name": "CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good",
          "full_code": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good()\n{\n    goodG2B();\n}",
          "start_line": 131,
          "end_line": 134,
          "line_count": 4,
          "metadata": {
            "return_type": "void",
            "parameters": [],
            "signature": "void CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good()",
            "is_library": false
          },
          "blocks": [
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    goodG2B();",
              "start_line": 133,
              "end_line": 133,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  ")",
                  ";"
                ]
              }
            }
          ]
        },
        {
          "level": "L2",
          "type": "FUNCTION",
          "name": "main",
          "full_code": "int main(int argc, char * argv[])\n{\n    /* seed randomness */\n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good();\n    printLine(\"Finished good()\");\n#endif /* OMITGOOD */\n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad();\n    printLine(\"Finished bad()\");\n#endif /* OMITBAD */\n    return 0;\n}",
          "start_line": 146,
          "end_line": 161,
          "line_count": 16,
          "metadata": {
            "return_type": "int",
            "parameters": [
              {
                "name": "argc",
                "type": "int"
              },
              {
                "name": "argv",
                "type": "char *"
              }
            ],
            "signature": "int main(int argc, char * argv[])",
            "is_library": false
          },
          "blocks": [
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    srand( (unsigned)time(NULL) );",
              "start_line": 149,
              "end_line": 149,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "(",
                  "VAR",
                  ")",
                  "VAR",
                  "(",
                  "NULL",
                  ")",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "#ifndef OMITGOOD",
              "start_line": 150,
              "end_line": 150,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "#",
                  "VAR",
                  "TYPE_VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    printLine(\"Calling good()...\");",
              "start_line": 151,
              "end_line": 151,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "\"STRING_LITERAL\"",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_good();",
              "start_line": 152,
              "end_line": 152,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "TYPE_VAR",
                  "(",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    printLine(\"Finished good()\");",
              "start_line": 153,
              "end_line": 153,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "\"STRING_LITERAL\"",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "#endif /* OMITGOOD */",
              "start_line": 154,
              "end_line": 154,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "#",
                  "VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "#ifndef OMITBAD",
              "start_line": 155,
              "end_line": 155,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "#",
                  "VAR",
                  "TYPE_VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    printLine(\"Calling bad()...\");",
              "start_line": 156,
              "end_line": 156,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "\"STRING_LITERAL\"",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    CWE15_External_Control_of_System_or_Configuration_Setting__w32_01_bad();",
              "start_line": 157,
              "end_line": 157,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "TYPE_VAR",
                  "(",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    printLine(\"Finished bad()\");",
              "start_line": 158,
              "end_line": 158,
              "line_count": 1,
              "metadata": {
                "statement_type": "function_call",
                "tokens": [
                  "VAR",
                  "(",
                  "\"STRING_LITERAL\"",
                  ")",
                  ";"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "#endif /* OMITBAD */",
              "start_line": 159,
              "end_line": 159,
              "line_count": 1,
              "metadata": {
                "statement_type": "expression",
                "tokens": [
                  "#",
                  "VAR"
                ]
              }
            },
            {
              "level": "L4",
              "type": "STATEMENT",
              "name": "statement",
              "full_code": "    return 0;",
              "start_line": 160,
              "end_line": 160,
              "line_count": 1,
              "metadata": {
                "statement_type": "return",
                "tokens": [
                  "return",
                  "0",
                  ";"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}