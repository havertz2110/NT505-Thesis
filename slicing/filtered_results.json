{
  "batch_info": {
    "processed_at": "2025-10-24T07:11:10.708835",
    "nested_strategy": "mark_nested"
  },
  "statistics": {
    "total_files": 2,
    "processed_files": 2,
    "failed_files": 0,
    "total_functions": 5,
    "total_vulnerable_functions": 5,
    "total_statements": 0,
    "total_tokens": 500
  },
  "files": [
    {
      "file_path": "/mnt/d/GitHub/NT505-Thesis/slicing/CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01.cpp",
      "file_name": "CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01.cpp",
      "processed_at": "2025-10-24T07:11:10.703309",
      "statistics": {
        "function_count": 2,
        "statement_count": 0,
        "token_count": 250,
        "nested_function_count": 0,
        "vulnerable_function_count": 2
      },
      "sliced_data": {
        "level": "L0",
        "type": "PROGRAM",
        "name": "CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01.cpp",
        "full_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define BASEPATH \"c:\\\\temp\\\\\"\n#else\n#include <wchar.h>\n#define BASEPATH \"/tmp/\"\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#ifdef _WIN32\n#define FOPEN fopen\n#else\n#define FOPEN fopen\n#endif\n\nnamespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01\n{\n\n#ifndef OMITBAD\n\nvoid bad()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        char *replace;\n        SOCKET connectSocket = INVALID_SOCKET;\n        size_t dataLen = strlen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n\n            \n            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (FILENAME_MAX - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(char)] = '\\0';\n            \n            replace = strchr(data, '\\r');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n            replace = strchr(data, '\\n');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\n#endif \n\n#ifndef OMITGOOD\n\n\nstatic void goodG2B()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    \n    strcat(data, \"file.txt\");\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\nvoid good()\n{\n    goodG2B();\n}\n\n#endif \n\n} \n\n\n\n\n\n\n#ifdef INCLUDEMAIN\n\nusing namespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01; \n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    good();\n    printLine(\"Finished good()\");\n#endif \n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    bad();\n    printLine(\"Finished bad()\");\n#endif \n    return 0;\n}\n\n#endif\n",
        "start_line": 1,
        "end_line": 199,
        "line_count": 199,
        "metadata": {
          "source_path": "/mnt/d/GitHub/NT505-Thesis/slicing/CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01.cpp",
          "includes": [
            "#include \"std_testcase.h\"",
            "#include <wchar.h>",
            "#include <winsock2.h>",
            "#include <windows.h>",
            "#include <direct.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <arpa/inet.h>",
            "#include <unistd.h>"
          ],
          "global_variables": [
            {
              "name": "bad",
              "type": "void",
              "line": 58
            },
            {
              "name": "data",
              "type": "char *",
              "line": 60
            },
            {
              "name": "dataBuffer",
              "type": "char",
              "line": 61
            },
            {
              "name": "wsaDataInit",
              "type": "int",
              "line": 66
            },
            {
              "name": "recvResult",
              "type": "int",
              "line": 68
            },
            {
              "name": "replace",
              "type": "char *",
              "line": 70
            },
            {
              "name": "dataLen",
              "type": "size_t",
              "line": 72
            },
            {
              "name": "goodG2B",
              "type": "static void",
              "line": 146
            },
            {
              "name": "data",
              "type": "char *",
              "line": 148
            },
            {
              "name": "dataBuffer",
              "type": "char",
              "line": 149
            },
            {
              "name": "good",
              "type": "void",
              "line": 164
            },
            {
              "name": "main",
              "type": "int",
              "line": 182
            }
          ],
          "total_lines": 199
        },
        "modules": [
          {
            "level": "L1",
            "type": "MODULE",
            "name": "GLOBAL_SCOPE",
            "full_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define BASEPATH \"c:\\\\temp\\\\\"\n#else\n#include <wchar.h>\n#define BASEPATH \"/tmp/\"\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#ifdef _WIN32\n#define FOPEN fopen\n#else\n#define FOPEN fopen\n#endif\n\nnamespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01\n{\n\n#ifndef OMITBAD\n\nvoid bad()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        char *replace;\n        SOCKET connectSocket = INVALID_SOCKET;\n        size_t dataLen = strlen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n\n            \n            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (FILENAME_MAX - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(char)] = '\\0';\n            \n            replace = strchr(data, '\\r');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n            replace = strchr(data, '\\n');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\n#endif \n\n#ifndef OMITGOOD\n\n\nstatic void goodG2B()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    \n    strcat(data, \"file.txt\");\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\nvoid good()\n{\n    goodG2B();\n}\n\n#endif \n\n} \n\n\n\n\n\n\n#ifdef INCLUDEMAIN\n\nusing namespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_01; \n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    good();\n    printLine(\"Finished good()\");\n#endif \n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    bad();\n    printLine(\"Finished bad()\");\n#endif \n    return 0;\n}\n\n#endif",
            "start_line": 1,
            "end_line": 199,
            "line_count": 199,
            "metadata": {
              "type": "global_functions"
            },
            "functions": [
              {
                "level": "L2",
                "type": "FUNCTION",
                "name": "bad",
                "full_code": "{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    {\n#ifdef _WIN32\n        WSADATA wsaData;\n        int wsaDataInit = 0;\n#endif\n        int recvResult;\n        struct sockaddr_in service;\n        char *replace;\n        SOCKET connectSocket = INVALID_SOCKET;\n        size_t dataLen = strlen(data);\n        do\n        {\n#ifdef _WIN32\n            if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n            {\n                break;\n            }\n            wsaDataInit = 1;\n#endif\n            \n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;\n            }\n            memset(&service, 0, sizeof(service));\n            service.sin_family = AF_INET;\n            service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n            service.sin_port = htons(TCP_PORT);\n            if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n            {\n                break;\n            }\n            \n\n            \n            recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (FILENAME_MAX - dataLen - 1), 0);\n            if (recvResult == SOCKET_ERROR || recvResult == 0)\n            {\n                break;\n            }\n            \n            data[dataLen + recvResult / sizeof(char)] = '\\0';\n            \n            replace = strchr(data, '\\r');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n            replace = strchr(data, '\\n');\n            if (replace)\n            {\n                *replace = '\\0';\n            }\n        }\n        while (0);\n        if (connectSocket != INVALID_SOCKET)\n        {\n            CLOSE_SOCKET(connectSocket);\n        }\n#ifdef _WIN32\n        if (wsaDataInit)\n        {\n            WSACleanup();\n        }\n#endif\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}",
                "start_line": 58,
                "end_line": 139,
                "line_count": 82,
                "metadata": {
                  "return_type": "void",
                  "parameters": [],
                  "signature": "void bad()",
                  "is_library": false,
                  "is_nested": false,
                  "function_scope": "top_level"
                },
                "blocks": [
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "            wsaDataInit = 1;\n#endif\n            \n            connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n            if (connectSocket == INVALID_SOCKET)\n            {\n                break;",
                    "start_line": 80,
                    "end_line": 86,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_1",
                      "function": "socket",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
                      "focus_line_number": 83,
                      "pattern_regex": "socket\\s*\\(\\w+,\\s*\\w+,\\s*\\w+\\)"
                    }
                  },
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);",
                    "start_line": 130,
                    "end_line": 136,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_2",
                      "function": "FOPEN",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "pFile = FOPEN(data, \"wb+\");",
                      "focus_line_number": 133,
                      "pattern_regex": "FOPEN\\s*\\(\\w+,\\s*\"[^\"]*\"\\)"
                    }
                  }
                ]
              },
              {
                "level": "L2",
                "type": "FUNCTION",
                "name": "goodG2B",
                "full_code": "{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    \n    strcat(data, \"file.txt\");\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}",
                "start_line": 146,
                "end_line": 162,
                "line_count": 17,
                "metadata": {
                  "return_type": "static void",
                  "parameters": [],
                  "signature": "static void goodG2B()",
                  "is_library": false,
                  "is_nested": false,
                  "function_scope": "top_level"
                },
                "blocks": [
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);",
                    "start_line": 153,
                    "end_line": 159,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_2",
                      "function": "FOPEN",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "pFile = FOPEN(data, \"wb+\");",
                      "focus_line_number": 156,
                      "pattern_regex": "FOPEN\\s*\\(\\w+,\\s*\"[^\"]*\"\\)"
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "tokens": [
        "{",
        "char",
        "*",
        "data",
        ";",
        "char",
        "dataBuffer",
        "[",
        "FILENAME_MAX",
        "]",
        "=",
        "BASEPATH",
        ";",
        "data",
        "=",
        "dataBuffer",
        ";",
        "{",
        "#",
        "ifdef",
        "_WIN32",
        "WSADATA",
        "wsaData",
        ";",
        "int",
        "wsaDataInit",
        "=",
        "0",
        ";",
        "#",
        "endif",
        "int",
        "recvResult",
        ";",
        "struct",
        "sockaddr_in",
        "service",
        ";",
        "char",
        "*",
        "replace",
        ";",
        "SOCKET",
        "connectSocket",
        "=",
        "INVALID_SOCKET",
        ";",
        "size_t",
        "dataLen",
        "=",
        "strlen",
        "(",
        "data",
        ")",
        ";",
        "do",
        "{",
        "#",
        "ifdef",
        "_WIN32",
        "if",
        "(",
        "WSAStartup",
        "(",
        "MAKEWORD",
        "(",
        "2",
        ",",
        "2",
        ")",
        ",",
        "&",
        "wsaData",
        ")",
        "!=",
        "NO_ERROR",
        ")",
        "{",
        "break",
        ";",
        "}",
        "wsaDataInit",
        "=",
        "1",
        ";",
        "#",
        "endif",
        "connectSocket",
        "=",
        "socket",
        "(",
        "AF_INET",
        ",",
        "SOCK_STREAM",
        ",",
        "IPPROTO_TCP",
        ")",
        ";",
        "if",
        "(",
        "connectSocket",
        "==",
        "INVALID_SOCKET",
        ")",
        "{",
        "break",
        ";",
        "}",
        "memset",
        "(",
        "&",
        "service",
        ",",
        "0",
        ",",
        "sizeof",
        "(",
        "service",
        ")",
        ")",
        ";",
        "service",
        ".",
        "sin_family",
        "=",
        "AF_INET",
        ";",
        "service",
        ".",
        "sin_addr",
        ".",
        "s_addr",
        "=",
        "inet_addr",
        "(",
        "IP_ADDRESS",
        ")",
        ";",
        "service",
        ".",
        "sin_port",
        "=",
        "htons",
        "(",
        "TCP_PORT",
        ")",
        ";",
        "if",
        "(",
        "connect",
        "(",
        "connectSocket",
        ",",
        "(",
        "struct",
        "sockaddr",
        "*",
        ")",
        "&",
        "service",
        ",",
        "sizeof",
        "(",
        "service",
        ")",
        ")",
        "==",
        "SOCKET_ERROR",
        ")",
        "{",
        "break",
        ";",
        "}",
        "recvResult",
        "=",
        "recv",
        "(",
        "connectSocket",
        ",",
        "(",
        "char",
        "*",
        ")",
        "(",
        "data",
        "+",
        "dataLen",
        ")",
        ",",
        "sizeof",
        "(",
        "char",
        ")",
        "*",
        "(",
        "FILENAME_MAX",
        "-",
        "dataLen",
        "-",
        "1",
        ")",
        ",",
        "0",
        ")",
        ";",
        "if",
        "(",
        "recvResult",
        "==",
        "SOCKET_ERROR",
        "||",
        "recvResult",
        "==",
        "0",
        ")",
        "{",
        "break",
        ";",
        "}",
        "data",
        "[",
        "dataLen",
        "+",
        "recvResult",
        "/",
        "sizeof",
        "(",
        "char",
        ")",
        "]",
        "=",
        "'",
        "\\",
        "0",
        "'",
        ";",
        "replace",
        "=",
        "strchr",
        "(",
        "data",
        ",",
        "'",
        "\\",
        "r",
        "'",
        ")",
        ";",
        "if",
        "("
      ]
    },
    {
      "file_path": "/mnt/d/GitHub/NT505-Thesis/slicing/CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02.cpp",
      "file_name": "CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02.cpp",
      "processed_at": "2025-10-24T07:11:10.708733",
      "statistics": {
        "function_count": 3,
        "statement_count": 0,
        "token_count": 250,
        "nested_function_count": 0,
        "vulnerable_function_count": 3
      },
      "sliced_data": {
        "level": "L0",
        "type": "PROGRAM",
        "name": "CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02.cpp",
        "full_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define BASEPATH \"c:\\\\temp\\\\\"\n#else\n#include <wchar.h>\n#define BASEPATH \"/tmp/\"\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#ifdef _WIN32\n#define FOPEN fopen\n#else\n#define FOPEN fopen\n#endif\n\nnamespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02\n{\n\n#ifndef OMITBAD\n\nvoid bad()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(1)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET connectSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n\n                \n                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (FILENAME_MAX - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\n#endif \n\n#ifndef OMITGOOD\n\n\nstatic void goodG2B1()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(0)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcat(data, \"file.txt\");\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\n\nstatic void goodG2B2()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(1)\n    {\n        \n        strcat(data, \"file.txt\");\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\nvoid good()\n{\n    goodG2B1();\n    goodG2B2();\n}\n\n#endif \n\n} \n\n\n\n\n\n\n#ifdef INCLUDEMAIN\n\nusing namespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02; \n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    good();\n    printLine(\"Finished good()\");\n#endif \n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    bad();\n    printLine(\"Finished bad()\");\n#endif \n    return 0;\n}\n\n#endif\n",
        "start_line": 1,
        "end_line": 233,
        "line_count": 233,
        "metadata": {
          "source_path": "/mnt/d/GitHub/NT505-Thesis/slicing/CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02.cpp",
          "includes": [
            "#include \"std_testcase.h\"",
            "#include <wchar.h>",
            "#include <winsock2.h>",
            "#include <windows.h>",
            "#include <direct.h>",
            "#include <sys/types.h>",
            "#include <sys/socket.h>",
            "#include <netinet/in.h>",
            "#include <arpa/inet.h>",
            "#include <unistd.h>"
          ],
          "global_variables": [
            {
              "name": "bad",
              "type": "void",
              "line": 58
            },
            {
              "name": "data",
              "type": "char *",
              "line": 60
            },
            {
              "name": "dataBuffer",
              "type": "char",
              "line": 61
            },
            {
              "name": "wsaDataInit",
              "type": "int",
              "line": 68
            },
            {
              "name": "recvResult",
              "type": "int",
              "line": 70
            },
            {
              "name": "replace",
              "type": "char *",
              "line": 72
            },
            {
              "name": "dataLen",
              "type": "size_t",
              "line": 74
            },
            {
              "name": "goodG2B1",
              "type": "static void",
              "line": 149
            },
            {
              "name": "data",
              "type": "char *",
              "line": 151
            },
            {
              "name": "dataBuffer",
              "type": "char",
              "line": 152
            },
            {
              "name": "goodG2B2",
              "type": "static void",
              "line": 176
            },
            {
              "name": "data",
              "type": "char *",
              "line": 178
            },
            {
              "name": "dataBuffer",
              "type": "char",
              "line": 179
            },
            {
              "name": "good",
              "type": "void",
              "line": 197
            },
            {
              "name": "main",
              "type": "int",
              "line": 216
            }
          ],
          "total_lines": 233
        },
        "modules": [
          {
            "level": "L1",
            "type": "MODULE",
            "name": "GLOBAL_SCOPE",
            "full_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#include \"std_testcase.h\"\n\n#ifdef _WIN32\n#define BASEPATH \"c:\\\\temp\\\\\"\n#else\n#include <wchar.h>\n#define BASEPATH \"/tmp/\"\n#endif\n\n#ifdef _WIN32\n#include <winsock2.h>\n#include <windows.h>\n#include <direct.h>\n#pragma comment(lib, \"ws2_32\") \n#define CLOSE_SOCKET closesocket\n#else \n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <unistd.h>\n#define INVALID_SOCKET -1\n#define SOCKET_ERROR -1\n#define CLOSE_SOCKET close\n#define SOCKET int\n#endif\n\n#define TCP_PORT 27015\n#define IP_ADDRESS \"127.0.0.1\"\n\n#ifdef _WIN32\n#define FOPEN fopen\n#else\n#define FOPEN fopen\n#endif\n\nnamespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02\n{\n\n#ifndef OMITBAD\n\nvoid bad()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(1)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET connectSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n\n                \n                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (FILENAME_MAX - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\n#endif \n\n#ifndef OMITGOOD\n\n\nstatic void goodG2B1()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(0)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcat(data, \"file.txt\");\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\n\nstatic void goodG2B2()\n{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(1)\n    {\n        \n        strcat(data, \"file.txt\");\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}\n\nvoid good()\n{\n    goodG2B1();\n    goodG2B2();\n}\n\n#endif \n\n} \n\n\n\n\n\n\n#ifdef INCLUDEMAIN\n\nusing namespace CWE23_Relative_Path_Traversal__char_connect_socket_fopen_02; \n\nint main(int argc, char * argv[])\n{\n    \n    srand( (unsigned)time(NULL) );\n#ifndef OMITGOOD\n    printLine(\"Calling good()...\");\n    good();\n    printLine(\"Finished good()\");\n#endif \n#ifndef OMITBAD\n    printLine(\"Calling bad()...\");\n    bad();\n    printLine(\"Finished bad()\");\n#endif \n    return 0;\n}\n\n#endif",
            "start_line": 1,
            "end_line": 233,
            "line_count": 233,
            "metadata": {
              "type": "global_functions"
            },
            "functions": [
              {
                "level": "L2",
                "type": "FUNCTION",
                "name": "bad",
                "full_code": "{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(1)\n    {\n        {\n#ifdef _WIN32\n            WSADATA wsaData;\n            int wsaDataInit = 0;\n#endif\n            int recvResult;\n            struct sockaddr_in service;\n            char *replace;\n            SOCKET connectSocket = INVALID_SOCKET;\n            size_t dataLen = strlen(data);\n            do\n            {\n#ifdef _WIN32\n                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)\n                {\n                    break;\n                }\n                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;\n                }\n                memset(&service, 0, sizeof(service));\n                service.sin_family = AF_INET;\n                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);\n                service.sin_port = htons(TCP_PORT);\n                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)\n                {\n                    break;\n                }\n                \n\n                \n                recvResult = recv(connectSocket, (char *)(data + dataLen), sizeof(char) * (FILENAME_MAX - dataLen - 1), 0);\n                if (recvResult == SOCKET_ERROR || recvResult == 0)\n                {\n                    break;\n                }\n                \n                data[dataLen + recvResult / sizeof(char)] = '\\0';\n                \n                replace = strchr(data, '\\r');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n                replace = strchr(data, '\\n');\n                if (replace)\n                {\n                    *replace = '\\0';\n                }\n            }\n            while (0);\n            if (connectSocket != INVALID_SOCKET)\n            {\n                CLOSE_SOCKET(connectSocket);\n            }\n#ifdef _WIN32\n            if (wsaDataInit)\n            {\n                WSACleanup();\n            }\n#endif\n        }\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}",
                "start_line": 58,
                "end_line": 142,
                "line_count": 85,
                "metadata": {
                  "return_type": "void",
                  "parameters": [],
                  "signature": "void bad()",
                  "is_library": false,
                  "is_nested": false,
                  "function_scope": "top_level"
                },
                "blocks": [
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "                wsaDataInit = 1;\n#endif\n                \n                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);\n                if (connectSocket == INVALID_SOCKET)\n                {\n                    break;",
                    "start_line": 82,
                    "end_line": 88,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_1",
                      "function": "socket",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);",
                      "focus_line_number": 85,
                      "pattern_regex": "socket\\s*\\(\\w+,\\s*\\w+,\\s*\\w+\\)"
                    }
                  },
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);",
                    "start_line": 133,
                    "end_line": 139,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_2",
                      "function": "FOPEN",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "pFile = FOPEN(data, \"wb+\");",
                      "focus_line_number": 136,
                      "pattern_regex": "FOPEN\\s*\\(\\w+,\\s*\"[^\"]*\"\\)"
                    }
                  }
                ]
              },
              {
                "level": "L2",
                "type": "FUNCTION",
                "name": "goodG2B1",
                "full_code": "{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(0)\n    {\n        \n        printLine(\"Benign, fixed string\");\n    }\n    else\n    {\n        \n        strcat(data, \"file.txt\");\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}",
                "start_line": 149,
                "end_line": 173,
                "line_count": 25,
                "metadata": {
                  "return_type": "static void",
                  "parameters": [],
                  "signature": "static void goodG2B1()",
                  "is_library": false,
                  "is_nested": false,
                  "function_scope": "top_level"
                },
                "blocks": [
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);",
                    "start_line": 164,
                    "end_line": 170,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_2",
                      "function": "FOPEN",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "pFile = FOPEN(data, \"wb+\");",
                      "focus_line_number": 167,
                      "pattern_regex": "FOPEN\\s*\\(\\w+,\\s*\"[^\"]*\"\\)"
                    }
                  }
                ]
              },
              {
                "level": "L2",
                "type": "FUNCTION",
                "name": "goodG2B2",
                "full_code": "{\n    char * data;\n    char dataBuffer[FILENAME_MAX] = BASEPATH;\n    data = dataBuffer;\n    if(1)\n    {\n        \n        strcat(data, \"file.txt\");\n    }\n    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);\n        }\n    }\n}",
                "start_line": 176,
                "end_line": 195,
                "line_count": 20,
                "metadata": {
                  "return_type": "static void",
                  "parameters": [],
                  "signature": "static void goodG2B2()",
                  "is_library": false,
                  "is_nested": false,
                  "function_scope": "top_level"
                },
                "blocks": [
                  {
                    "level": "L3",
                    "type": "STATEMENT_BLOCK",
                    "name": "vulnerable_context",
                    "full_code": "    {\n        FILE *pFile = NULL;\n        \n        pFile = FOPEN(data, \"wb+\");\n        if (pFile != NULL)\n        {\n            fclose(pFile);",
                    "start_line": 186,
                    "end_line": 192,
                    "line_count": 7,
                    "metadata": {
                      "block_type": "cwe_pattern_context",
                      "cwe_id": "MIXED",
                      "pattern_id": "pattern_2",
                      "function": "FOPEN",
                      "pattern_type": "regex",
                      "anchor": null,
                      "matched_line": "pFile = FOPEN(data, \"wb+\");",
                      "focus_line_number": 189,
                      "pattern_regex": "FOPEN\\s*\\(\\w+,\\s*\"[^\"]*\"\\)"
                    }
                  }
                ]
              }
            ]
          }
        ]
      },
      "tokens": [
        "{",
        "char",
        "*",
        "data",
        ";",
        "char",
        "dataBuffer",
        "[",
        "FILENAME_MAX",
        "]",
        "=",
        "BASEPATH",
        ";",
        "data",
        "=",
        "dataBuffer",
        ";",
        "if",
        "(",
        "1",
        ")",
        "{",
        "{",
        "#",
        "ifdef",
        "_WIN32",
        "WSADATA",
        "wsaData",
        ";",
        "int",
        "wsaDataInit",
        "=",
        "0",
        ";",
        "#",
        "endif",
        "int",
        "recvResult",
        ";",
        "struct",
        "sockaddr_in",
        "service",
        ";",
        "char",
        "*",
        "replace",
        ";",
        "SOCKET",
        "connectSocket",
        "=",
        "INVALID_SOCKET",
        ";",
        "size_t",
        "dataLen",
        "=",
        "strlen",
        "(",
        "data",
        ")",
        ";",
        "do",
        "{",
        "#",
        "ifdef",
        "_WIN32",
        "if",
        "(",
        "WSAStartup",
        "(",
        "MAKEWORD",
        "(",
        "2",
        ",",
        "2",
        ")",
        ",",
        "&",
        "wsaData",
        ")",
        "!=",
        "NO_ERROR",
        ")",
        "{",
        "break",
        ";",
        "}",
        "wsaDataInit",
        "=",
        "1",
        ";",
        "#",
        "endif",
        "connectSocket",
        "=",
        "socket",
        "(",
        "AF_INET",
        ",",
        "SOCK_STREAM",
        ",",
        "IPPROTO_TCP",
        ")",
        ";",
        "if",
        "(",
        "connectSocket",
        "==",
        "INVALID_SOCKET",
        ")",
        "{",
        "break",
        ";",
        "}",
        "memset",
        "(",
        "&",
        "service",
        ",",
        "0",
        ",",
        "sizeof",
        "(",
        "service",
        ")",
        ")",
        ";",
        "service",
        ".",
        "sin_family",
        "=",
        "AF_INET",
        ";",
        "service",
        ".",
        "sin_addr",
        ".",
        "s_addr",
        "=",
        "inet_addr",
        "(",
        "IP_ADDRESS",
        ")",
        ";",
        "service",
        ".",
        "sin_port",
        "=",
        "htons",
        "(",
        "TCP_PORT",
        ")",
        ";",
        "if",
        "(",
        "connect",
        "(",
        "connectSocket",
        ",",
        "(",
        "struct",
        "sockaddr",
        "*",
        ")",
        "&",
        "service",
        ",",
        "sizeof",
        "(",
        "service",
        ")",
        ")",
        "==",
        "SOCKET_ERROR",
        ")",
        "{",
        "break",
        ";",
        "}",
        "recvResult",
        "=",
        "recv",
        "(",
        "connectSocket",
        ",",
        "(",
        "char",
        "*",
        ")",
        "(",
        "data",
        "+",
        "dataLen",
        ")",
        ",",
        "sizeof",
        "(",
        "char",
        ")",
        "*",
        "(",
        "FILENAME_MAX",
        "-",
        "dataLen",
        "-",
        "1",
        ")",
        ",",
        "0",
        ")",
        ";",
        "if",
        "(",
        "recvResult",
        "==",
        "SOCKET_ERROR",
        "||",
        "recvResult",
        "==",
        "0",
        ")",
        "{",
        "break",
        ";",
        "}",
        "data",
        "[",
        "dataLen",
        "+",
        "recvResult",
        "/",
        "sizeof",
        "(",
        "char",
        ")",
        "]",
        "=",
        "'",
        "\\",
        "0",
        "'",
        ";",
        "replace",
        "=",
        "strchr",
        "(",
        "data",
        ",",
        "'",
        "\\",
        "r"
      ]
    }
  ]
}